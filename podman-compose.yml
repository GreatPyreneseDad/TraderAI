# TraderAI Podman Compose Configuration
# Modern container runtime deployment using Podman
version: '3.8'

services:
  traderai-app:
    build:
      context: .
      dockerfile: Containerfile  # Podman prefers Containerfile
    container_name: traderai-app
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-traderai}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-traderai}
      DATABASE_READ_REPLICA_URL: postgresql://${DB_USER:-traderai}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-traderai}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      TIINGO_API_TOKEN: ${TIINGO_API_TOKEN}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      PANDAS_AI_SERVICE_URL: http://pandas-ai:8001
    depends_on:
      - postgres
      - redis
      - pandas-ai
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs:Z  # SELinux-aware volume mounting
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    networks:
      - traderai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: docker.io/library/postgres:15-alpine
    container_name: traderai-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-traderai}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-traderai}
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=pg_stat_statements"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./database/setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro,Z
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-traderai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - traderai-network

  redis:
    image: docker.io/library/redis:7-alpine
    container_name: traderai-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
    volumes:
      - redis_data:/data:Z
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - traderai-network

  pandas-ai:
    build:
      context: ./pandas-ai-service
      dockerfile: Containerfile
    container_name: traderai-pandas-ai
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      DATABASE_URL: postgresql://${DB_USER:-traderai}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-traderai}
      LOG_LEVEL: INFO
      CACHE_TTL: 300
    depends_on:
      - postgres
      - redis
    ports:
      - "8001:8001"
    volumes:
      - ./logs:/app/logs:Z
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /app/cache:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - traderai-network

  # Monitoring stack using modern lightweight alternatives
  prometheus:
    image: quay.io/prometheus/prometheus:latest
    container_name: traderai-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro,Z
      - prometheus_data:/prometheus:Z
    ports:
      - "9090:9090"
    depends_on:
      - traderai-app
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - traderai-network

  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: traderai-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource,postgres-datasource
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana:Z
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro,Z
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro,Z
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - traderai-network

  # Reverse proxy using modern lightweight alternative
  caddy:
    image: docker.io/library/caddy:alpine
    container_name: traderai-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro,Z
      - ./frontend/dist:/srv:ro,Z
      - caddy_data:/data:Z
      - caddy_config:/config:Z
    depends_on:
      - traderai-app
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    networks:
      - traderai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  traderai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16