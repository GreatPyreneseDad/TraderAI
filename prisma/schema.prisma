// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  username        String       @unique
  passwordHash    String
  role            UserRole     @default(USER)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  inferences      Inference[]
  verifications   Verification[]
  debateVotes     DebateVote[]
}

model MarketData {
  id              String       @id @default(uuid())
  symbol          String
  timestamp       DateTime
  price           Float
  volume          BigInt
  coherenceScores Json         // {psi, rho, q, f}
  sentiment       Float?
  createdAt       DateTime     @default(now())
  
  @@index([symbol, timestamp])
  @@index([timestamp])
}

model Inference {
  id              String       @id @default(uuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  query           String
  context         String?
  
  // Three-angle responses
  conservative    Json
  progressive     Json
  synthetic       Json
  
  selectedOption  String?
  confidence      Float?
  status          InferenceStatus @default(PENDING)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  verifications   Verification[]
  debate          Debate?
}

model Verification {
  id              String       @id @default(uuid())
  inferenceId     String
  inference       Inference    @relation(fields: [inferenceId], references: [id])
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  
  selectedOption  String       // 'conservative', 'progressive', 'synthetic', 'debate_winner'
  rationale       String?
  confidence      Float
  
  createdAt       DateTime     @default(now())
}

model Debate {
  id              String       @id @default(uuid())
  inferenceId     String       @unique
  inference       Inference    @relation(fields: [inferenceId], references: [id])
  
  symbol          String?
  question        String
  
  // Debate content
  bullArguments   Json[]       // Array of arguments
  bearArguments   Json[]       // Array of arguments
  judgeEvaluation Json         // Final evaluation
  
  winner          DebatePosition
  confidence      Float
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  votes           DebateVote[]
}

model DebateVote {
  id              String       @id @default(uuid())
  debateId        String
  debate          Debate       @relation(fields: [debateId], references: [id])
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  
  votedFor        DebatePosition
  rationale       String?
  
  createdAt       DateTime     @default(now())
  
  @@unique([debateId, userId])
}

model Alert {
  id              String       @id @default(uuid())
  type            AlertType
  severity        AlertSeverity
  symbol          String?
  title           String
  message         String
  data            Json?
  
  acknowledged    Boolean      @default(false)
  acknowledgedAt  DateTime?
  acknowledgedBy  String?
  
  createdAt       DateTime     @default(now())
  
  @@index([severity, acknowledged])
  @@index([symbol, createdAt])
}

model SystemHealth {
  id              String       @id @default(uuid())
  service         String       // 'ecne', 'gct', 'claude', 'database', 'websocket'
  status          HealthStatus
  message         String?
  metrics         Json?        // CPU, memory, latency, etc.
  
  timestamp       DateTime     @default(now())
  
  @@index([service, timestamp])
}

// Enums
enum UserRole {
  USER
  ANALYST
  ADMIN
}

enum InferenceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DebatePosition {
  BULL
  BEAR
  NEUTRAL
}

enum AlertType {
  COHERENCE_SPIKE
  MARKET_ANOMALY
  SYSTEM_ERROR
  API_LIMIT
  DEBATE_CONSENSUS
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
  OFFLINE
}